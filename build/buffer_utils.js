import { AudioCtx, platform, logError } from './utils';
export function bufferToArrayBuffer(buffer) {
    var arraybuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < view.length; i++) {
        view[i] = buffer[i];
    }
    return arraybuffer;
}
export function arrayBufferToBuffer(arraybuffer) {
    if (platform.browser || platform.webpack) {
        logError('Buffer utils', '[ Buffer\'s arrayBufferToBuffer ] method Must be used in "node" or "electron"', true);
    }
    var buffer = new Buffer(arraybuffer.byteLength);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < buffer.length; i++) {
        buffer[i] = view[i];
    }
    return buffer;
}
export function arrayBufferToAudioBuffer(arraybuffer) {
    var ac = AudioCtx;
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) { return audioBuffer; })
        .catch(function (error) { return error; });
}
export function blobToArrayBuffer(blob) {
    return new Promise(function (resolve) {
        var reader = new FileReader;
        reader.readAsArrayBuffer(blob);
        reader.onload = function () { return resolve(reader.result); };
    });
}
export function blobToAudioBuffer(blob) {
    return new Promise(function (resolve) {
        var ac = AudioCtx;
        var reader = new FileReader;
        reader.readAsArrayBuffer(blob);
        reader.onload = function () {
            ac.decodeAudioData(reader.result, function (ab) { return resolve(ab); });
        };
    });
}
export function arrayBufferToBlob(arraybuffer, mimeType) {
    return new Blob([arraybuffer], { type: mimeType });
}
export function audioBufferToArrayBuffer(audioBuffer) {
    var channel = audioBuffer.numberOfChannels;
    function collect(buffers) {
        if (buffers.length < 2)
            return buffers[0];
        var length = buffers[0].length + buffers[1].length;
        var result = new Float32Array(length);
        var index = 0;
        var inputIndex = 0;
        while (index < length) {
            result[index++] = buffers[0][inputIndex];
            result[index++] = buffers[1][inputIndex];
            inputIndex++;
        }
        return result;
    }
    function getFloat32Array() {
        var buffers = [];
        for (var i = 0; i < channel; i++) {
            buffers.push(audioBuffer.getChannelData(i));
        }
        return buffers;
    }
    var buffers = getFloat32Array();
    return collect(buffers).buffer;
}
export function arrayBufferToAcResource(ac, arraybuffer, volume) {
    if (volume === void 0) { volume = 1; }
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) {
        var source = ac.createBufferSource();
        var gainNode = ac.createGain();
        gainNode.connect(ac.destination);
        source.connect(gainNode);
        source.buffer = audioBuffer;
        gainNode.gain.value = volume;
        return source;
    })
        .catch(function (error) { return error; });
}
export function mergeArraybuffer(buffers) {
    if (buffers.length === 1)
        return buffers[0];
    return buffers.reduce(function (collectBuffer, buffer, i) {
        var tmp = new Uint8Array(collectBuffer.byteLength + buffer.byteLength);
        tmp.set(new Uint8Array(collectBuffer), 0);
        tmp.set(new Uint8Array(buffer), collectBuffer.byteLength);
        return tmp.buffer;
    }, buffers[0]);
}
export function mergeAduioBuffer(buffers) {
    var ac = AudioCtx;
    var channels = 2;
    function getLength() {
        var length = 0;
        for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
        }
        return length;
    }
    function getConcatBuffer(newAudioBuffer) {
        var newBuffers = [];
        for (var i = 0; i < channels; i++) {
            newBuffers[i] = newAudioBuffer.getChannelData(i);
        }
        return newBuffers;
    }
    var frameCount = getLength();
    var audioBuffer = ac.createBuffer(channels, frameCount, ac.sampleRate);
    var newBuffers = getConcatBuffer(audioBuffer);
    for (var i = 0; i < newBuffers.length; i++) {
        var newBuffer = newBuffers[i];
        var size = 0;
        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buffer = buffers_1[_i];
            var data = buffer.getChannelData(i);
            for (var j = 0; j < data.length; j++) {
                newBuffer[size++] = data[j];
            }
        }
    }
    return audioBuffer;
}
export function cloneBuffer(buffer, isDeep) {
    if (isDeep)
        return buffer.slice();
    var length = buffer.length;
    var result = platform.node || platform.electron
        ? Buffer.allocUnsafe(length)
        : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
export function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
export function cloneDataView(dataView, isDeep) {
    var buffer = isDeep
        ? cloneArrayBuffer(dataView.buffer)
        : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2J1ZmZlcl91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFJdEQsTUFBTSw4QkFBK0IsTUFBYTtJQUNoRCxJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEQsSUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNwQjtJQUVELE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxNQUFNLDhCQUErQixXQUF1QjtJQUMxRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUN4QyxRQUFRLENBQUMsY0FBYyxFQUFFLCtFQUErRSxFQUFFLElBQUksQ0FBQyxDQUFBO0tBQ2hIO0lBRUQsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2pELElBQU0sSUFBSSxHQUFHLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRXhDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDcEI7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7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