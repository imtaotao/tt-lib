import { platform, logError } from './utils';
export function bufferToArrayBuffer(buffer) {
    var arraybuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < view.length; i++) {
        view[i] = buffer[i];
    }
    return arraybuffer;
}
export function arrayBufferToBuffer(arraybuffer) {
    if (platform.browser) {
        logError('Audio', 'platform must "node" or "electron"', true);
    }
    var buffer = new Buffer(arraybuffer.byteLength);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < buffer.length; i++) {
        buffer[i] = view[i];
    }
    return buffer;
}
export function audioBufferToArrayBuffer(audioBuffer, channel) {
    if (channel === void 0) { channel = 2; }
    if (channel !== 1 && channel !== 2) {
        throw Error('Channel must 1 or 2.');
    }
    if (channel === 1) {
        return audioBuffer.getChannelData(0).buffer;
    }
    function collect(buffers) {
        var length = buffers[0].length + buffers[1].length;
        var result = new Float32Array(length);
        var index = 0;
        var inputIndex = 0;
        while (index < length) {
            result[index++] = buffers[0][inputIndex];
            result[index++] = buffers[1][inputIndex];
            inputIndex++;
        }
        return result;
    }
    function getFloat32Array() {
        var buffers = [];
        for (var i = 0; i < channel; i++) {
            if (!buffers[i]) {
                buffers[i] = [];
            }
            buffers[i].push(audioBuffer.getChannelData(i));
        }
        return buffers;
    }
    var buffers = getFloat32Array();
    return collect(buffers).buffer;
}
export function arrayBufferToAcResource(ac, arraybuffer, volume) {
    if (volume === void 0) { volume = 1; }
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) {
        var source = ac.createBufferSource();
        var gainNode = ac.createGain();
        gainNode.connect(ac.destination);
        source.connect(gainNode);
        source.buffer = audioBuffer;
        gainNode.gain.value = volume;
        return source;
    })
        .catch(function (error) { return error; });
}
export function mergeArraybuffer(buffers) {
    if (buffers.length === 1)
        return buffers[0];
    return buffers.reduce(function (collectBuffer, buffer, i) {
        var tmp = new Uint8Array(collectBuffer.byteLength + buffer.byteLength);
        tmp.set(new Uint8Array(collectBuffer), 0);
        tmp.set(new Uint8Array(buffer), collectBuffer.byteLength);
        return tmp.buffer;
    }, buffers[0]);
}
export function mergeAduioBuffer(ac, buffers) {
    var channels = 2;
    function getLength() {
        var length = 0;
        for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
        }
        return length;
    }
    function getConcatBuffer(newAudioBuffer) {
        var newBuffers = [];
        for (var i = 0; i < channels; i++) {
            newBuffers[i] = newAudioBuffer.getChannelData(i);
        }
        return newBuffers;
    }
    var frameCount = getLength();
    var audioBuffer = ac.createBuffer(channels, frameCount, ac.sampleRate);
    var newBuffers = getConcatBuffer(audioBuffer);
    for (var i = 0; i < newBuffers.length; i++) {
        var newBuffer = newBuffers[i];
        var size = 0;
        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buffer = buffers_1[_i];
            var data = buffer.getChannelData(i);
            for (var j = 0; j < data.length; j++) {
                newBuffer[size++] = data[j];
            }
        }
    }
    return audioBuffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2J1ZmZlcl91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUU3QyxNQUFNLDhCQUErQixNQUFhO0lBQ2hELElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNsRCxJQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUV4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxNQUFNLDhCQUErQixXQUF1QjtJQUMxRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNyQixRQUFRLENBQUMsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFFRCxJQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDakQsSUFBTSxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFeEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJ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