import { AudioCtx, platform, logError } from './utils';
export function bufferToArraybuffer(buffer) {
    var arraybuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < view.length; i++) {
        view[i] = buffer[i];
    }
    return arraybuffer;
}
export function arraybufferToBuffer(arraybuffer) {
    if (platform.browser || platform.build) {
        logError('Buffer utils', '[ arrayBufferToBuffer ] method Must be used in "node" or "electron"', true);
    }
    var buffer = new Buffer(arraybuffer.byteLength);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < buffer.length; i++) {
        buffer[i] = view[i];
    }
    return buffer;
}
export function arraybufferToAudiobuffer(arraybuffer) {
    var ac = AudioCtx;
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) { return audioBuffer; })
        .catch(function (error) { return error; });
}
export function blobToArraybuffer(blob) {
    return new Promise(function (resolve) {
        var reader = new FileReader;
        reader.readAsArrayBuffer(blob);
        reader.onload = function () { return resolve(reader.result); };
    });
}
export function blobToAudiobuffer(blob) {
    return new Promise(function (resolve) {
        var ac = AudioCtx;
        var reader = new FileReader;
        reader.readAsArrayBuffer(blob);
        reader.onload = function () {
            ac.decodeAudioData(reader.result, function (ab) { return resolve(ab); });
        };
    });
}
export function arraybufferToBlob(arraybuffer, mimeType) {
    return new Blob([arraybuffer], { type: mimeType });
}
export function audiobufferToArraybuffer(audioBuffer) {
    var channel = audioBuffer.numberOfChannels;
    function collect(buffers) {
        if (buffers.length < 2)
            return buffers[0];
        var length = buffers[0].length + buffers[1].length;
        var result = new Float32Array(length);
        var index = 0;
        var inputIndex = 0;
        while (index < length) {
            result[index++] = buffers[0][inputIndex];
            result[index++] = buffers[1][inputIndex];
            inputIndex++;
        }
        return result;
    }
    function getFloat32Array() {
        var buffers = [];
        for (var i = 0; i < channel; i++) {
            buffers.push(audioBuffer.getChannelData(i));
        }
        return buffers;
    }
    var buffers = getFloat32Array();
    return collect(buffers).buffer;
}
export function arraybufferToAcResource(ac, arraybuffer, volume) {
    if (volume === void 0) { volume = 1; }
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) {
        var source = ac.createBufferSource();
        var gainNode = ac.createGain();
        gainNode.connect(ac.destination);
        source.connect(gainNode);
        source.buffer = audioBuffer;
        gainNode.gain.value = volume;
        return source;
    })
        .catch(function (error) { return error; });
}
export function mergeArraybuffer(buffers) {
    if (buffers.length === 1)
        return buffers[0];
    return buffers.reduce(function (collectBuffer, buffer, i) {
        var tmp = new Uint8Array(collectBuffer.byteLength + buffer.byteLength);
        tmp.set(new Uint8Array(collectBuffer), 0);
        tmp.set(new Uint8Array(buffer), collectBuffer.byteLength);
        return tmp.buffer;
    }, buffers[0]);
}
export function mergeAduiobuffer(buffers) {
    var ac = AudioCtx;
    var channels = 2;
    function getLength() {
        var length = 0;
        for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
        }
        return length;
    }
    function getConcatBuffer(newAudioBuffer) {
        var newBuffers = [];
        for (var i = 0; i < channels; i++) {
            newBuffers[i] = newAudioBuffer.getChannelData(i);
        }
        return newBuffers;
    }
    var frameCount = getLength();
    var audioBuffer = ac.createBuffer(channels, frameCount, ac.sampleRate);
    var newBuffers = getConcatBuffer(audioBuffer);
    for (var i = 0; i < newBuffers.length; i++) {
        var newBuffer = newBuffers[i];
        var size = 0;
        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buffer = buffers_1[_i];
            var data = buffer.getChannelData(i);
            for (var j = 0; j < data.length; j++) {
                newBuffer[size++] = data[j];
            }
        }
    }
    return audioBuffer;
}
export function cloneBuffer(buffer, isDeep) {
    if (isDeep)
        return buffer.slice();
    var length = buffer.length;
    var result = platform.node || platform.electron
        ? Buffer.allocUnsafe(length)
        : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
export function cloneArraybuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
export function cloneDataView(dataView, isDeep) {
    var buffer = isDeep
        ? cloneArraybuffer(dataView.buffer)
        : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
//# sourceMappingURL=data:application/json;base64,