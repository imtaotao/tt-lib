import { platform, logError } from './utils';
export function bufferToArrayBuffer(buffer) {
    var arraybuffer = new ArrayBuffer(buffer.length);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < view.length; i++) {
        view[i] = buffer[i];
    }
    return arraybuffer;
}
export function arrayBufferToBuffer(arraybuffer) {
    if (platform.browser || platform.webpack) {
        logError('Audio', '[ Buffer.arrayBufferToBuffer ] method Must be used in "node" or "electron"', true);
    }
    var buffer = new Buffer(arraybuffer.byteLength);
    var view = new Uint8Array(arraybuffer);
    for (var i = 0; i < buffer.length; i++) {
        buffer[i] = view[i];
    }
    return buffer;
}
export function audioBufferToArrayBuffer(audioBuffer, channel) {
    if (channel === void 0) { channel = 2; }
    if (channel !== 1 && channel !== 2) {
        throw Error('Channel must 1 or 2.');
    }
    if (channel === 1) {
        return audioBuffer.getChannelData(0).buffer;
    }
    function collect(buffers) {
        var length = buffers[0].length + buffers[1].length;
        var result = new Float32Array(length);
        var index = 0;
        var inputIndex = 0;
        while (index < length) {
            result[index++] = buffers[0][inputIndex];
            result[index++] = buffers[1][inputIndex];
            inputIndex++;
        }
        return result;
    }
    function getFloat32Array() {
        var buffers = [];
        for (var i = 0; i < channel; i++) {
            if (!buffers[i]) {
                buffers[i] = [];
            }
            buffers[i].push(audioBuffer.getChannelData(i));
        }
        return buffers;
    }
    var buffers = getFloat32Array();
    return collect(buffers).buffer;
}
export function arrayBufferToAcResource(ac, arraybuffer, volume) {
    if (volume === void 0) { volume = 1; }
    return ac.decodeAudioData(arraybuffer)
        .then(function (audioBuffer) {
        var source = ac.createBufferSource();
        var gainNode = ac.createGain();
        gainNode.connect(ac.destination);
        source.connect(gainNode);
        source.buffer = audioBuffer;
        gainNode.gain.value = volume;
        return source;
    })
        .catch(function (error) { return error; });
}
export function mergeArraybuffer(buffers) {
    if (buffers.length === 1)
        return buffers[0];
    return buffers.reduce(function (collectBuffer, buffer, i) {
        var tmp = new Uint8Array(collectBuffer.byteLength + buffer.byteLength);
        tmp.set(new Uint8Array(collectBuffer), 0);
        tmp.set(new Uint8Array(buffer), collectBuffer.byteLength);
        return tmp.buffer;
    }, buffers[0]);
}
export function mergeAduioBuffer(ac, buffers) {
    var channels = 2;
    function getLength() {
        var length = 0;
        for (var i = 0; i < buffers.length; i++) {
            length += buffers[i].length;
        }
        return length;
    }
    function getConcatBuffer(newAudioBuffer) {
        var newBuffers = [];
        for (var i = 0; i < channels; i++) {
            newBuffers[i] = newAudioBuffer.getChannelData(i);
        }
        return newBuffers;
    }
    var frameCount = getLength();
    var audioBuffer = ac.createBuffer(channels, frameCount, ac.sampleRate);
    var newBuffers = getConcatBuffer(audioBuffer);
    for (var i = 0; i < newBuffers.length; i++) {
        var newBuffer = newBuffers[i];
        var size = 0;
        for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {
            var buffer = buffers_1[_i];
            var data = buffer.getChannelData(i);
            for (var j = 0; j < data.length; j++) {
                newBuffer[size++] = data[j];
            }
        }
    }
    return audioBuffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVmZmVyX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2J1ZmZlcl91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUU3QyxNQUFNLDhCQUErQixNQUFhO0lBQ2hELElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNsRCxJQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUV4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxNQUFNLDhCQUErQixXQUF1QjtJQUMxRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsNEVBQTRFLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDdkcsQ0FBQztJQUVELElBQU0sTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNqRCxJQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUV4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN2QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxD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