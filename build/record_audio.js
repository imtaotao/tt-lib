import { AudioCtx, download, inlineWorker, logError } from './utils';
function workerBody() {
    var _self = this;
    var config = {
        bufferLen: 4096,
        numChannels: 2,
        mime_type: 'audio/wav',
    };
    var recordBuffer = [];
    _self.onmessage = function (e) {
        switch (e.data.command) {
            case 'record':
                recordData(e.data.val);
                break;
            case 'exportWAV':
                exportWAV();
                break;
        }
    };
    function recordData(inputBuffer) {
        var numChannels = config.numChannels;
        for (var i = 0; i < numChannels; i++) {
            if (!recordBuffer[i]) {
                recordBuffer[i] = [];
            }
            recordBuffer[i].push(inputBuffer[i]);
        }
    }
    function exportWAV() {
        var collectRecord = collect();
        var audioBlob = createAudioBlob(collectRecord);
        recordBuffer = [];
        _self.postMessage({
            command: 'exportWAV',
            val: audioBlob,
        });
    }
    function createAudioBlob(collectRecord) {
        var numChannels = config.numChannels, mime_type = config.mime_type;
        var interleaveData = encodeWAV(44100, numChannels, collectRecord);
        return [
            new Blob([interleaveData], { type: mime_type }),
            interleaveData,
        ];
    }
    function collect() {
        var buffers = [];
        for (var i = 0; i < config.numChannels; i++) {
            buffers.push(mergeBuffers(recordBuffer[i]));
        }
        var length = buffers[0].length + buffers[1].length;
        var result = new Float32Array(length);
        var index = 0;
        var inputIndex = 0;
        while (index < length) {
            result[index++] = buffers[0][inputIndex];
            result[index++] = buffers[1][inputIndex];
            inputIndex++;
        }
        return result;
    }
    function mergeBuffers(buffers) {
        var result = new Float32Array(config.bufferLen * buffers.length);
        var offset = 0;
        for (var i = 0; i < buffers.length; i++) {
            result.set(buffers[i], offset);
            offset += buffers[i].length;
        }
        return result;
    }
    function encodeWAV(sampleRate, numChannels, samples) {
        var dataLength = samples.length * numChannels;
        var buffer = new ArrayBuffer(dataLength + 44);
        var view = new DataView(buffer);
        writeString(view, 0, 'RIFF');
        view.setUint32(4, 36 + dataLength, true);
        writeString(view, 8, 'WAVE');
        writeString(view, 12, 'fmt ');
        view.setUint32(16, 16, true);
        view.setUint16(20, 1, true);
        view.setUint16(22, numChannels, true);
        view.setUint32(24, sampleRate, true);
        view.setUint32(28, sampleRate * numChannels * 2, true);
        view.setUint16(32, numChannels * 2, true);
        view.setUint16(34, 16, true);
        writeString(view, 36, 'data');
        view.setUint32(40, dataLength, true);
        floatTo16BitPCM(view, 44, samples);
        return view;
    }
    function floatTo16BitPCM(output, offset, input) {
        for (var i = 0; i < input.length; i++, offset += 2) {
            var s = Math.max(-1, Math.min(1, input[i]));
            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
    }
    function writeString(view, offset, string) {
        for (var i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }
}
var Record = (function () {
    function Record(filename, successFn, errorFn) {
        this.context = AudioCtx;
        this.volume = 1;
        this.errorFn = Record.logError;
        this.worker = Record.inlineWorker(workerBody);
        this.recording = false;
        this.playing = false;
        this.config = {
            bufferLen: 4096,
            numChannels: 2,
        };
        this.filename = filename || 'record';
        this.successFn = successFn || (function () { });
        this.errorFn = errorFn;
        this.listenerWorker();
        this.createEnv();
    }
    Record.prototype.listenerWorker = function () {
        var _this = this;
        this.worker.onmessage = function (e) {
            switch (e.data.command) {
                case 'exportWAV':
                    _this.recordEnded(e.data.val);
                    break;
            }
        };
        this.worker.onerror = this.errorFn;
    };
    Record.prototype.recordEnded = function (_a) {
        var audioBlob = _a[0], interleaveData = _a[1];
        this.audioBlob = audioBlob;
        this.interleaveData = interleaveData.buffer;
        this.audio = null;
        this.recording = false;
        this.successFn();
    };
    Record.prototype.createEnv = function () {
        var _this = this;
        this.connectDevice()
            .then(function (stream) {
            var context = _this.context;
            var _a = _this.config, bufferLen = _a.bufferLen, numChannels = _a.numChannels;
            _this.recorder = context.createScriptProcessor(bufferLen, numChannels, numChannels);
            _this.audioInput = context.createMediaStreamSource(stream);
            _this.recorder.onaudioprocess = function (e) {
                var buffer = [];
                for (var channel = 0; channel < numChannels; channel++) {
                    buffer.push(e.inputBuffer.getChannelData(channel));
                }
                _this.worker.postMessage({
                    command: 'record',
                    val: buffer,
                });
            };
        });
    };
    Record.prototype.connectDevice = function () {
        return navigator.mediaDevices.getUserMedia({ audio: true })
            .then(function (stream) { return stream; })
            .catch(this.errorFn);
    };
    Record.prototype.startRecord = function () {
        var _this = this;
        if (this.recording) {
            return this.errorFn("In recording");
        }
        var connect = function () {
            var _a = _this, audioInput = _a.audioInput, recorder = _a.recorder, context = _a.context;
            if (!audioInput) {
                setTimeout(connect);
                return;
            }
            _this.recording = true;
            _this.audioBlob = null;
            audioInput.connect(recorder);
            recorder.connect(context.destination);
        };
        connect();
    };
    Record.prototype.stopRecord = function () {
        if (!this.recording) {
            return this.errorFn("No recording");
        }
        this.recorder.disconnect();
        this.worker.postMessage({
            command: 'exportWAV'
        });
    };
    Record.prototype.play = function () {
        var _this = this;
        if (this.playing)
            return this.errorFn('Is playing');
        if (!this.audioBlob && !this.audio) {
            return this.errorFn("No audio resources");
        }
        this.playing = true;
        if (!this.audio) {
            this.audio = Record.createAudioEl(this.audioBlob);
            this.audio.volume = this.volume;
            this.audio.onended = function (e) {
                _this.playing = false;
            };
        }
        this.audio.play();
    };
    Record.prototype.pause = function () {
        if (!this.playing) {
            return this.errorFn('Not playing');
        }
        this.audio.pause();
        this.playing = false;
    };
    Record.prototype.download = function () {
        if (this.recording)
            return this.errorFn("In recording");
        if (!this.audioBlob)
            return this.errorFn("Audio blob is [" + this.audioBlob + "]");
        Record.download(this.audioBlob, this.filename + '.wav');
    };
    Record.logError = function (infor, isErr) {
        logError('Record', infor, isErr);
    };
    Record.inlineWorker = function (func) {
        return inlineWorker(func);
    };
    Record.download = function (blob, filename) {
        download(blob, filename);
    };
    Record.createAudioEl = function (blob) {
        var url = window.URL.createObjectURL(blob);
        var audio = document.createElement('audio');
        audio.src = url;
        return audio;
    };
    return Record;
}());
export { Record };
//# sourceMappingURL=data:application/json;base64,